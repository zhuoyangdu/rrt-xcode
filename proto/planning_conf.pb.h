// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planning_conf.proto

#ifndef PROTOBUF_INCLUDED_planning_5fconf_2eproto
#define PROTOBUF_INCLUDED_planning_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_planning_5fconf_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_planning_5fconf_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_planning_5fconf_2eproto();
namespace planning {
class FakeState;
class FakeStateDefaultTypeInternal;
extern FakeStateDefaultTypeInternal _FakeState_default_instance_;
class Goal;
class GoalDefaultTypeInternal;
extern GoalDefaultTypeInternal _Goal_default_instance_;
class PlanningConf;
class PlanningConfDefaultTypeInternal;
extern PlanningConfDefaultTypeInternal _PlanningConf_default_instance_;
class RRTConf;
class RRTConfDefaultTypeInternal;
extern RRTConfDefaultTypeInternal _RRTConf_default_instance_;
class VrepConf;
class VrepConfDefaultTypeInternal;
extern VrepConfDefaultTypeInternal _VrepConf_default_instance_;
}  // namespace planning
namespace google {
namespace protobuf {
template<> ::planning::FakeState* Arena::CreateMaybeMessage<::planning::FakeState>(Arena*);
template<> ::planning::Goal* Arena::CreateMaybeMessage<::planning::Goal>(Arena*);
template<> ::planning::PlanningConf* Arena::CreateMaybeMessage<::planning::PlanningConf>(Arena*);
template<> ::planning::RRTConf* Arena::CreateMaybeMessage<::planning::RRTConf>(Arena*);
template<> ::planning::VrepConf* Arena::CreateMaybeMessage<::planning::VrepConf>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace planning {

// ===================================================================

class RRTConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.RRTConf) */ {
 public:
  RRTConf();
  virtual ~RRTConf();

  RRTConf(const RRTConf& from);

  inline RRTConf& operator=(const RRTConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RRTConf(RRTConf&& from) noexcept
    : RRTConf() {
    *this = ::std::move(from);
  }

  inline RRTConf& operator=(RRTConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RRTConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RRTConf* internal_default_instance() {
    return reinterpret_cast<const RRTConf*>(
               &_RRTConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RRTConf* other);
  friend void swap(RRTConf& a, RRTConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RRTConf* New() const final {
    return CreateMaybeMessage<RRTConf>(NULL);
  }

  RRTConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RRTConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RRTConf& from);
  void MergeFrom(const RRTConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RRTConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string record_path = 11;
  bool has_record_path() const;
  void clear_record_path();
  static const int kRecordPathFieldNumber = 11;
  const ::std::string& record_path() const;
  void set_record_path(const ::std::string& value);
  #if LANG_CXX11
  void set_record_path(::std::string&& value);
  #endif
  void set_record_path(const char* value);
  void set_record_path(const char* value, size_t size);
  ::std::string* mutable_record_path();
  ::std::string* release_record_path();
  void set_allocated_record_path(::std::string* record_path);

  // optional double time_step = 1;
  bool has_time_step() const;
  void clear_time_step();
  static const int kTimeStepFieldNumber = 1;
  double time_step() const;
  void set_time_step(double value);

  // optional double k_voronoi = 2;
  bool has_k_voronoi() const;
  void clear_k_voronoi();
  static const int kKVoronoiFieldNumber = 2;
  double k_voronoi() const;
  void set_k_voronoi(double value);

  // optional double k_goal = 3;
  bool has_k_goal() const;
  void clear_k_goal();
  static const int kKGoalFieldNumber = 3;
  double k_goal() const;
  void set_k_goal(double value);

  // optional int32 max_attemp = 5;
  bool has_max_attemp() const;
  void clear_max_attemp();
  static const int kMaxAttempFieldNumber = 5;
  ::google::protobuf::int32 max_attemp() const;
  void set_max_attemp(::google::protobuf::int32 value);

  // optional int32 step_size = 6;
  bool has_step_size() const;
  void clear_step_size();
  static const int kStepSizeFieldNumber = 6;
  ::google::protobuf::int32 step_size() const;
  void set_step_size(::google::protobuf::int32 value);

  // optional double k_repulsive = 8;
  bool has_k_repulsive() const;
  void clear_k_repulsive();
  static const int kKRepulsiveFieldNumber = 8;
  double k_repulsive() const;
  void set_k_repulsive(double value);

  // optional bool show_image = 4;
  bool has_show_image() const;
  void clear_show_image();
  static const int kShowImageFieldNumber = 4;
  bool show_image() const;
  void set_show_image(bool value);

  // optional bool turn_on_prior = 7;
  bool has_turn_on_prior() const;
  void clear_turn_on_prior();
  static const int kTurnOnPriorFieldNumber = 7;
  bool turn_on_prior() const;
  void set_turn_on_prior(bool value);

  // optional bool record = 10;
  bool has_record() const;
  void clear_record();
  static const int kRecordFieldNumber = 10;
  bool record() const;
  void set_record(bool value);

  // optional bool uniform_sample = 12;
  bool has_uniform_sample() const;
  void clear_uniform_sample();
  static const int kUniformSampleFieldNumber = 12;
  bool uniform_sample() const;
  void set_uniform_sample(bool value);

  // optional int32 post_iteration = 9;
  bool has_post_iteration() const;
  void clear_post_iteration();
  static const int kPostIterationFieldNumber = 9;
  ::google::protobuf::int32 post_iteration() const;
  void set_post_iteration(::google::protobuf::int32 value);

  // optional int32 pivots_k = 13;
  bool has_pivots_k() const;
  void clear_pivots_k();
  static const int kPivotsKFieldNumber = 13;
  ::google::protobuf::int32 pivots_k() const;
  void set_pivots_k(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:planning.RRTConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr record_path_;
  double time_step_;
  double k_voronoi_;
  double k_goal_;
  ::google::protobuf::int32 max_attemp_;
  ::google::protobuf::int32 step_size_;
  double k_repulsive_;
  bool show_image_;
  bool turn_on_prior_;
  bool record_;
  bool uniform_sample_;
  ::google::protobuf::int32 post_iteration_;
  ::google::protobuf::int32 pivots_k_;
  friend struct ::TableStruct_planning_5fconf_2eproto;
};
// -------------------------------------------------------------------

class VrepConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.VrepConf) */ {
 public:
  VrepConf();
  virtual ~VrepConf();

  VrepConf(const VrepConf& from);

  inline VrepConf& operator=(const VrepConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VrepConf(VrepConf&& from) noexcept
    : VrepConf() {
    *this = ::std::move(from);
  }

  inline VrepConf& operator=(VrepConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VrepConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VrepConf* internal_default_instance() {
    return reinterpret_cast<const VrepConf*>(
               &_VrepConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VrepConf* other);
  friend void swap(VrepConf& a, VrepConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VrepConf* New() const final {
    return CreateMaybeMessage<VrepConf>(NULL);
  }

  VrepConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VrepConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VrepConf& from);
  void MergeFrom(const VrepConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VrepConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 resolutionX = 1;
  bool has_resolutionx() const;
  void clear_resolutionx();
  static const int kResolutionXFieldNumber = 1;
  ::google::protobuf::int32 resolutionx() const;
  void set_resolutionx(::google::protobuf::int32 value);

  // optional int32 resolutionY = 2;
  bool has_resolutiony() const;
  void clear_resolutiony();
  static const int kResolutionYFieldNumber = 2;
  ::google::protobuf::int32 resolutiony() const;
  void set_resolutiony(::google::protobuf::int32 value);

  // optional double minX = 3;
  bool has_minx() const;
  void clear_minx();
  static const int kMinXFieldNumber = 3;
  double minx() const;
  void set_minx(double value);

  // optional double maxX = 4;
  bool has_maxx() const;
  void clear_maxx();
  static const int kMaxXFieldNumber = 4;
  double maxx() const;
  void set_maxx(double value);

  // optional double minY = 5;
  bool has_miny() const;
  void clear_miny();
  static const int kMinYFieldNumber = 5;
  double miny() const;
  void set_miny(double value);

  // optional double maxY = 6;
  bool has_maxy() const;
  void clear_maxy();
  static const int kMaxYFieldNumber = 6;
  double maxy() const;
  void set_maxy(double value);

  // @@protoc_insertion_point(class_scope:planning.VrepConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 resolutionx_;
  ::google::protobuf::int32 resolutiony_;
  double minx_;
  double maxx_;
  double miny_;
  double maxy_;
  friend struct ::TableStruct_planning_5fconf_2eproto;
};
// -------------------------------------------------------------------

class Goal : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.Goal) */ {
 public:
  Goal();
  virtual ~Goal();

  Goal(const Goal& from);

  inline Goal& operator=(const Goal& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Goal(Goal&& from) noexcept
    : Goal() {
    *this = ::std::move(from);
  }

  inline Goal& operator=(Goal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Goal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Goal* internal_default_instance() {
    return reinterpret_cast<const Goal*>(
               &_Goal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Goal* other);
  friend void swap(Goal& a, Goal& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Goal* New() const final {
    return CreateMaybeMessage<Goal>(NULL);
  }

  Goal* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Goal>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Goal& from);
  void MergeFrom(const Goal& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Goal* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double row = 1;
  bool has_row() const;
  void clear_row();
  static const int kRowFieldNumber = 1;
  double row() const;
  void set_row(double value);

  // optional double col = 2;
  bool has_col() const;
  void clear_col();
  static const int kColFieldNumber = 2;
  double col() const;
  void set_col(double value);

  // @@protoc_insertion_point(class_scope:planning.Goal)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double row_;
  double col_;
  friend struct ::TableStruct_planning_5fconf_2eproto;
};
// -------------------------------------------------------------------

class FakeState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.FakeState) */ {
 public:
  FakeState();
  virtual ~FakeState();

  FakeState(const FakeState& from);

  inline FakeState& operator=(const FakeState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FakeState(FakeState&& from) noexcept
    : FakeState() {
    *this = ::std::move(from);
  }

  inline FakeState& operator=(FakeState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FakeState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FakeState* internal_default_instance() {
    return reinterpret_cast<const FakeState*>(
               &_FakeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FakeState* other);
  friend void swap(FakeState& a, FakeState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FakeState* New() const final {
    return CreateMaybeMessage<FakeState>(NULL);
  }

  FakeState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FakeState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FakeState& from);
  void MergeFrom(const FakeState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FakeState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  double x() const;
  void set_x(double value);

  // optional double y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  double y() const;
  void set_y(double value);

  // optional double theta = 3;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 3;
  double theta() const;
  void set_theta(double value);

  // @@protoc_insertion_point(class_scope:planning.FakeState)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double theta_;
  friend struct ::TableStruct_planning_5fconf_2eproto;
};
// -------------------------------------------------------------------

class PlanningConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:planning.PlanningConf) */ {
 public:
  PlanningConf();
  virtual ~PlanningConf();

  PlanningConf(const PlanningConf& from);

  inline PlanningConf& operator=(const PlanningConf& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlanningConf(PlanningConf&& from) noexcept
    : PlanningConf() {
    *this = ::std::move(from);
  }

  inline PlanningConf& operator=(PlanningConf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PlanningConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlanningConf* internal_default_instance() {
    return reinterpret_cast<const PlanningConf*>(
               &_PlanningConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlanningConf* other);
  friend void swap(PlanningConf& a, PlanningConf& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlanningConf* New() const final {
    return CreateMaybeMessage<PlanningConf>(NULL);
  }

  PlanningConf* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlanningConf>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlanningConf& from);
  void MergeFrom(const PlanningConf& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlanningConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string map_path = 6;
  bool has_map_path() const;
  void clear_map_path();
  static const int kMapPathFieldNumber = 6;
  const ::std::string& map_path() const;
  void set_map_path(const ::std::string& value);
  #if LANG_CXX11
  void set_map_path(::std::string&& value);
  #endif
  void set_map_path(const char* value);
  void set_map_path(const char* value, size_t size);
  ::std::string* mutable_map_path();
  ::std::string* release_map_path();
  void set_allocated_map_path(::std::string* map_path);

  // optional .planning.RRTConf rrt_conf = 2;
  bool has_rrt_conf() const;
  void clear_rrt_conf();
  static const int kRrtConfFieldNumber = 2;
  const ::planning::RRTConf& rrt_conf() const;
  ::planning::RRTConf* release_rrt_conf();
  ::planning::RRTConf* mutable_rrt_conf();
  void set_allocated_rrt_conf(::planning::RRTConf* rrt_conf);

  // optional .planning.VrepConf vrep_conf = 3;
  bool has_vrep_conf() const;
  void clear_vrep_conf();
  static const int kVrepConfFieldNumber = 3;
  const ::planning::VrepConf& vrep_conf() const;
  ::planning::VrepConf* release_vrep_conf();
  ::planning::VrepConf* mutable_vrep_conf();
  void set_allocated_vrep_conf(::planning::VrepConf* vrep_conf);

  // optional .planning.Goal goal = 4;
  bool has_goal() const;
  void clear_goal();
  static const int kGoalFieldNumber = 4;
  const ::planning::Goal& goal() const;
  ::planning::Goal* release_goal();
  ::planning::Goal* mutable_goal();
  void set_allocated_goal(::planning::Goal* goal);

  // optional .planning.FakeState fake_state = 7;
  bool has_fake_state() const;
  void clear_fake_state();
  static const int kFakeStateFieldNumber = 7;
  const ::planning::FakeState& fake_state() const;
  ::planning::FakeState* release_fake_state();
  ::planning::FakeState* mutable_fake_state();
  void set_allocated_fake_state(::planning::FakeState* fake_state);

  // optional bool use_sim_time = 1;
  bool has_use_sim_time() const;
  void clear_use_sim_time();
  static const int kUseSimTimeFieldNumber = 1;
  bool use_sim_time() const;
  void set_use_sim_time(bool value);

  // optional bool map_from_file = 5;
  bool has_map_from_file() const;
  void clear_map_from_file();
  static const int kMapFromFileFieldNumber = 5;
  bool map_from_file() const;
  void set_map_from_file(bool value);

  // @@protoc_insertion_point(class_scope:planning.PlanningConf)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr map_path_;
  ::planning::RRTConf* rrt_conf_;
  ::planning::VrepConf* vrep_conf_;
  ::planning::Goal* goal_;
  ::planning::FakeState* fake_state_;
  bool use_sim_time_;
  bool map_from_file_;
  friend struct ::TableStruct_planning_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RRTConf

// optional double time_step = 1;
inline bool RRTConf::has_time_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RRTConf::clear_time_step() {
  time_step_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RRTConf::time_step() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.time_step)
  return time_step_;
}
inline void RRTConf::set_time_step(double value) {
  _has_bits_[0] |= 0x00000002u;
  time_step_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.time_step)
}

// optional double k_voronoi = 2;
inline bool RRTConf::has_k_voronoi() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RRTConf::clear_k_voronoi() {
  k_voronoi_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RRTConf::k_voronoi() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.k_voronoi)
  return k_voronoi_;
}
inline void RRTConf::set_k_voronoi(double value) {
  _has_bits_[0] |= 0x00000004u;
  k_voronoi_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.k_voronoi)
}

// optional double k_goal = 3;
inline bool RRTConf::has_k_goal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RRTConf::clear_k_goal() {
  k_goal_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RRTConf::k_goal() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.k_goal)
  return k_goal_;
}
inline void RRTConf::set_k_goal(double value) {
  _has_bits_[0] |= 0x00000008u;
  k_goal_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.k_goal)
}

// optional bool show_image = 4;
inline bool RRTConf::has_show_image() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RRTConf::clear_show_image() {
  show_image_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool RRTConf::show_image() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.show_image)
  return show_image_;
}
inline void RRTConf::set_show_image(bool value) {
  _has_bits_[0] |= 0x00000080u;
  show_image_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.show_image)
}

// optional int32 max_attemp = 5;
inline bool RRTConf::has_max_attemp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RRTConf::clear_max_attemp() {
  max_attemp_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::int32 RRTConf::max_attemp() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.max_attemp)
  return max_attemp_;
}
inline void RRTConf::set_max_attemp(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  max_attemp_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.max_attemp)
}

// optional int32 step_size = 6;
inline bool RRTConf::has_step_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RRTConf::clear_step_size() {
  step_size_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::int32 RRTConf::step_size() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.step_size)
  return step_size_;
}
inline void RRTConf::set_step_size(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  step_size_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.step_size)
}

// optional bool turn_on_prior = 7;
inline bool RRTConf::has_turn_on_prior() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RRTConf::clear_turn_on_prior() {
  turn_on_prior_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool RRTConf::turn_on_prior() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.turn_on_prior)
  return turn_on_prior_;
}
inline void RRTConf::set_turn_on_prior(bool value) {
  _has_bits_[0] |= 0x00000100u;
  turn_on_prior_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.turn_on_prior)
}

// optional double k_repulsive = 8;
inline bool RRTConf::has_k_repulsive() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RRTConf::clear_k_repulsive() {
  k_repulsive_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double RRTConf::k_repulsive() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.k_repulsive)
  return k_repulsive_;
}
inline void RRTConf::set_k_repulsive(double value) {
  _has_bits_[0] |= 0x00000040u;
  k_repulsive_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.k_repulsive)
}

// optional int32 post_iteration = 9;
inline bool RRTConf::has_post_iteration() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RRTConf::clear_post_iteration() {
  post_iteration_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::google::protobuf::int32 RRTConf::post_iteration() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.post_iteration)
  return post_iteration_;
}
inline void RRTConf::set_post_iteration(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  post_iteration_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.post_iteration)
}

// optional bool record = 10;
inline bool RRTConf::has_record() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RRTConf::clear_record() {
  record_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool RRTConf::record() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.record)
  return record_;
}
inline void RRTConf::set_record(bool value) {
  _has_bits_[0] |= 0x00000200u;
  record_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.record)
}

// optional string record_path = 11;
inline bool RRTConf::has_record_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RRTConf::clear_record_path() {
  record_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& RRTConf::record_path() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.record_path)
  return record_path_.GetNoArena();
}
inline void RRTConf::set_record_path(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  record_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning.RRTConf.record_path)
}
#if LANG_CXX11
inline void RRTConf::set_record_path(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  record_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning.RRTConf.record_path)
}
#endif
inline void RRTConf::set_record_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  record_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning.RRTConf.record_path)
}
inline void RRTConf::set_record_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  record_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning.RRTConf.record_path)
}
inline ::std::string* RRTConf::mutable_record_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:planning.RRTConf.record_path)
  return record_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RRTConf::release_record_path() {
  // @@protoc_insertion_point(field_release:planning.RRTConf.record_path)
  if (!has_record_path()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return record_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RRTConf::set_allocated_record_path(::std::string* record_path) {
  if (record_path != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  record_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), record_path);
  // @@protoc_insertion_point(field_set_allocated:planning.RRTConf.record_path)
}

// optional bool uniform_sample = 12;
inline bool RRTConf::has_uniform_sample() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RRTConf::clear_uniform_sample() {
  uniform_sample_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool RRTConf::uniform_sample() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.uniform_sample)
  return uniform_sample_;
}
inline void RRTConf::set_uniform_sample(bool value) {
  _has_bits_[0] |= 0x00000400u;
  uniform_sample_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.uniform_sample)
}

// optional int32 pivots_k = 13;
inline bool RRTConf::has_pivots_k() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RRTConf::clear_pivots_k() {
  pivots_k_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::google::protobuf::int32 RRTConf::pivots_k() const {
  // @@protoc_insertion_point(field_get:planning.RRTConf.pivots_k)
  return pivots_k_;
}
inline void RRTConf::set_pivots_k(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  pivots_k_ = value;
  // @@protoc_insertion_point(field_set:planning.RRTConf.pivots_k)
}

// -------------------------------------------------------------------

// VrepConf

// optional int32 resolutionX = 1;
inline bool VrepConf::has_resolutionx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VrepConf::clear_resolutionx() {
  resolutionx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 VrepConf::resolutionx() const {
  // @@protoc_insertion_point(field_get:planning.VrepConf.resolutionX)
  return resolutionx_;
}
inline void VrepConf::set_resolutionx(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  resolutionx_ = value;
  // @@protoc_insertion_point(field_set:planning.VrepConf.resolutionX)
}

// optional int32 resolutionY = 2;
inline bool VrepConf::has_resolutiony() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VrepConf::clear_resolutiony() {
  resolutiony_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 VrepConf::resolutiony() const {
  // @@protoc_insertion_point(field_get:planning.VrepConf.resolutionY)
  return resolutiony_;
}
inline void VrepConf::set_resolutiony(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  resolutiony_ = value;
  // @@protoc_insertion_point(field_set:planning.VrepConf.resolutionY)
}

// optional double minX = 3;
inline bool VrepConf::has_minx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VrepConf::clear_minx() {
  minx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double VrepConf::minx() const {
  // @@protoc_insertion_point(field_get:planning.VrepConf.minX)
  return minx_;
}
inline void VrepConf::set_minx(double value) {
  _has_bits_[0] |= 0x00000004u;
  minx_ = value;
  // @@protoc_insertion_point(field_set:planning.VrepConf.minX)
}

// optional double maxX = 4;
inline bool VrepConf::has_maxx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VrepConf::clear_maxx() {
  maxx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double VrepConf::maxx() const {
  // @@protoc_insertion_point(field_get:planning.VrepConf.maxX)
  return maxx_;
}
inline void VrepConf::set_maxx(double value) {
  _has_bits_[0] |= 0x00000008u;
  maxx_ = value;
  // @@protoc_insertion_point(field_set:planning.VrepConf.maxX)
}

// optional double minY = 5;
inline bool VrepConf::has_miny() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VrepConf::clear_miny() {
  miny_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double VrepConf::miny() const {
  // @@protoc_insertion_point(field_get:planning.VrepConf.minY)
  return miny_;
}
inline void VrepConf::set_miny(double value) {
  _has_bits_[0] |= 0x00000010u;
  miny_ = value;
  // @@protoc_insertion_point(field_set:planning.VrepConf.minY)
}

// optional double maxY = 6;
inline bool VrepConf::has_maxy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VrepConf::clear_maxy() {
  maxy_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double VrepConf::maxy() const {
  // @@protoc_insertion_point(field_get:planning.VrepConf.maxY)
  return maxy_;
}
inline void VrepConf::set_maxy(double value) {
  _has_bits_[0] |= 0x00000020u;
  maxy_ = value;
  // @@protoc_insertion_point(field_set:planning.VrepConf.maxY)
}

// -------------------------------------------------------------------

// Goal

// optional double row = 1;
inline bool Goal::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Goal::clear_row() {
  row_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Goal::row() const {
  // @@protoc_insertion_point(field_get:planning.Goal.row)
  return row_;
}
inline void Goal::set_row(double value) {
  _has_bits_[0] |= 0x00000001u;
  row_ = value;
  // @@protoc_insertion_point(field_set:planning.Goal.row)
}

// optional double col = 2;
inline bool Goal::has_col() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Goal::clear_col() {
  col_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Goal::col() const {
  // @@protoc_insertion_point(field_get:planning.Goal.col)
  return col_;
}
inline void Goal::set_col(double value) {
  _has_bits_[0] |= 0x00000002u;
  col_ = value;
  // @@protoc_insertion_point(field_set:planning.Goal.col)
}

// -------------------------------------------------------------------

// FakeState

// optional double x = 1;
inline bool FakeState::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FakeState::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FakeState::x() const {
  // @@protoc_insertion_point(field_get:planning.FakeState.x)
  return x_;
}
inline void FakeState::set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:planning.FakeState.x)
}

// optional double y = 2;
inline bool FakeState::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FakeState::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FakeState::y() const {
  // @@protoc_insertion_point(field_get:planning.FakeState.y)
  return y_;
}
inline void FakeState::set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:planning.FakeState.y)
}

// optional double theta = 3;
inline bool FakeState::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FakeState::clear_theta() {
  theta_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FakeState::theta() const {
  // @@protoc_insertion_point(field_get:planning.FakeState.theta)
  return theta_;
}
inline void FakeState::set_theta(double value) {
  _has_bits_[0] |= 0x00000004u;
  theta_ = value;
  // @@protoc_insertion_point(field_set:planning.FakeState.theta)
}

// -------------------------------------------------------------------

// PlanningConf

// optional bool use_sim_time = 1;
inline bool PlanningConf::has_use_sim_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlanningConf::clear_use_sim_time() {
  use_sim_time_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PlanningConf::use_sim_time() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConf.use_sim_time)
  return use_sim_time_;
}
inline void PlanningConf::set_use_sim_time(bool value) {
  _has_bits_[0] |= 0x00000020u;
  use_sim_time_ = value;
  // @@protoc_insertion_point(field_set:planning.PlanningConf.use_sim_time)
}

// optional .planning.RRTConf rrt_conf = 2;
inline bool PlanningConf::has_rrt_conf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlanningConf::clear_rrt_conf() {
  if (rrt_conf_ != NULL) rrt_conf_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::planning::RRTConf& PlanningConf::rrt_conf() const {
  const ::planning::RRTConf* p = rrt_conf_;
  // @@protoc_insertion_point(field_get:planning.PlanningConf.rrt_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::planning::RRTConf*>(
      &::planning::_RRTConf_default_instance_);
}
inline ::planning::RRTConf* PlanningConf::release_rrt_conf() {
  // @@protoc_insertion_point(field_release:planning.PlanningConf.rrt_conf)
  _has_bits_[0] &= ~0x00000002u;
  ::planning::RRTConf* temp = rrt_conf_;
  rrt_conf_ = NULL;
  return temp;
}
inline ::planning::RRTConf* PlanningConf::mutable_rrt_conf() {
  _has_bits_[0] |= 0x00000002u;
  if (rrt_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::planning::RRTConf>(GetArenaNoVirtual());
    rrt_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.PlanningConf.rrt_conf)
  return rrt_conf_;
}
inline void PlanningConf::set_allocated_rrt_conf(::planning::RRTConf* rrt_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rrt_conf_;
  }
  if (rrt_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rrt_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rrt_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rrt_conf_ = rrt_conf;
  // @@protoc_insertion_point(field_set_allocated:planning.PlanningConf.rrt_conf)
}

// optional .planning.VrepConf vrep_conf = 3;
inline bool PlanningConf::has_vrep_conf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlanningConf::clear_vrep_conf() {
  if (vrep_conf_ != NULL) vrep_conf_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::planning::VrepConf& PlanningConf::vrep_conf() const {
  const ::planning::VrepConf* p = vrep_conf_;
  // @@protoc_insertion_point(field_get:planning.PlanningConf.vrep_conf)
  return p != NULL ? *p : *reinterpret_cast<const ::planning::VrepConf*>(
      &::planning::_VrepConf_default_instance_);
}
inline ::planning::VrepConf* PlanningConf::release_vrep_conf() {
  // @@protoc_insertion_point(field_release:planning.PlanningConf.vrep_conf)
  _has_bits_[0] &= ~0x00000004u;
  ::planning::VrepConf* temp = vrep_conf_;
  vrep_conf_ = NULL;
  return temp;
}
inline ::planning::VrepConf* PlanningConf::mutable_vrep_conf() {
  _has_bits_[0] |= 0x00000004u;
  if (vrep_conf_ == NULL) {
    auto* p = CreateMaybeMessage<::planning::VrepConf>(GetArenaNoVirtual());
    vrep_conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.PlanningConf.vrep_conf)
  return vrep_conf_;
}
inline void PlanningConf::set_allocated_vrep_conf(::planning::VrepConf* vrep_conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete vrep_conf_;
  }
  if (vrep_conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      vrep_conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vrep_conf, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vrep_conf_ = vrep_conf;
  // @@protoc_insertion_point(field_set_allocated:planning.PlanningConf.vrep_conf)
}

// optional .planning.Goal goal = 4;
inline bool PlanningConf::has_goal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlanningConf::clear_goal() {
  if (goal_ != NULL) goal_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::planning::Goal& PlanningConf::goal() const {
  const ::planning::Goal* p = goal_;
  // @@protoc_insertion_point(field_get:planning.PlanningConf.goal)
  return p != NULL ? *p : *reinterpret_cast<const ::planning::Goal*>(
      &::planning::_Goal_default_instance_);
}
inline ::planning::Goal* PlanningConf::release_goal() {
  // @@protoc_insertion_point(field_release:planning.PlanningConf.goal)
  _has_bits_[0] &= ~0x00000008u;
  ::planning::Goal* temp = goal_;
  goal_ = NULL;
  return temp;
}
inline ::planning::Goal* PlanningConf::mutable_goal() {
  _has_bits_[0] |= 0x00000008u;
  if (goal_ == NULL) {
    auto* p = CreateMaybeMessage<::planning::Goal>(GetArenaNoVirtual());
    goal_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.PlanningConf.goal)
  return goal_;
}
inline void PlanningConf::set_allocated_goal(::planning::Goal* goal) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete goal_;
  }
  if (goal) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      goal = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  goal_ = goal;
  // @@protoc_insertion_point(field_set_allocated:planning.PlanningConf.goal)
}

// optional bool map_from_file = 5;
inline bool PlanningConf::has_map_from_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlanningConf::clear_map_from_file() {
  map_from_file_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PlanningConf::map_from_file() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConf.map_from_file)
  return map_from_file_;
}
inline void PlanningConf::set_map_from_file(bool value) {
  _has_bits_[0] |= 0x00000040u;
  map_from_file_ = value;
  // @@protoc_insertion_point(field_set:planning.PlanningConf.map_from_file)
}

// optional string map_path = 6;
inline bool PlanningConf::has_map_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlanningConf::clear_map_path() {
  map_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& PlanningConf::map_path() const {
  // @@protoc_insertion_point(field_get:planning.PlanningConf.map_path)
  return map_path_.GetNoArena();
}
inline void PlanningConf::set_map_path(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:planning.PlanningConf.map_path)
}
#if LANG_CXX11
inline void PlanningConf::set_map_path(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  map_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:planning.PlanningConf.map_path)
}
#endif
inline void PlanningConf::set_map_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  _has_bits_[0] |= 0x00000001u;
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:planning.PlanningConf.map_path)
}
inline void PlanningConf::set_map_path(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  map_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:planning.PlanningConf.map_path)
}
inline ::std::string* PlanningConf::mutable_map_path() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:planning.PlanningConf.map_path)
  return map_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlanningConf::release_map_path() {
  // @@protoc_insertion_point(field_release:planning.PlanningConf.map_path)
  if (!has_map_path()) {
    return NULL;
  }
  _has_bits_[0] &= ~0x00000001u;
  return map_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlanningConf::set_allocated_map_path(::std::string* map_path) {
  if (map_path != NULL) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  map_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_path);
  // @@protoc_insertion_point(field_set_allocated:planning.PlanningConf.map_path)
}

// optional .planning.FakeState fake_state = 7;
inline bool PlanningConf::has_fake_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlanningConf::clear_fake_state() {
  if (fake_state_ != NULL) fake_state_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::planning::FakeState& PlanningConf::fake_state() const {
  const ::planning::FakeState* p = fake_state_;
  // @@protoc_insertion_point(field_get:planning.PlanningConf.fake_state)
  return p != NULL ? *p : *reinterpret_cast<const ::planning::FakeState*>(
      &::planning::_FakeState_default_instance_);
}
inline ::planning::FakeState* PlanningConf::release_fake_state() {
  // @@protoc_insertion_point(field_release:planning.PlanningConf.fake_state)
  _has_bits_[0] &= ~0x00000010u;
  ::planning::FakeState* temp = fake_state_;
  fake_state_ = NULL;
  return temp;
}
inline ::planning::FakeState* PlanningConf::mutable_fake_state() {
  _has_bits_[0] |= 0x00000010u;
  if (fake_state_ == NULL) {
    auto* p = CreateMaybeMessage<::planning::FakeState>(GetArenaNoVirtual());
    fake_state_ = p;
  }
  // @@protoc_insertion_point(field_mutable:planning.PlanningConf.fake_state)
  return fake_state_;
}
inline void PlanningConf::set_allocated_fake_state(::planning::FakeState* fake_state) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fake_state_;
  }
  if (fake_state) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fake_state = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fake_state, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  fake_state_ = fake_state;
  // @@protoc_insertion_point(field_set_allocated:planning.PlanningConf.fake_state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace planning

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_planning_5fconf_2eproto
